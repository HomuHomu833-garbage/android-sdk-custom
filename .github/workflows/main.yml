name: Build

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Specific Branches or Tags"
        required: true
        default: "platform-tools-35.0.2"

jobs:
  build:
    name: build
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - target_arch: arm
            target_triple: arm-linux-musleabi
          - target_arch: armhf
            target_triple: arm-linux-musleabihf
          - target_arch: arm64
            target_triple: aarch64-linux-musl
          - target_arch: loongarch64
            target_triple: loongarch64-linux-musl
          - target_arch: riscv32
            target_triple: riscv32-linux-musl
          - target_arch: riscv64
            target_triple: riscv64-linux-musl
          - target_arch: x86
            target_triple: x86-linux-musl
          - target_arch: x86_64
            target_triple: x86_64-linux-musl
    env:
      ZIG_TARGET: ${{ matrix.target_triple }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Zig
        uses: mlugg/setup-zig@v1.2.1
        with:
          version: "0.15.0-dev.137+db7db4802"
          use-cache: false

      - name: Setup Zig Toolchain
        run: |
          cd ${{ github.workspace }}
          git clone https://github.com/HomuHomu833/zig-as-llvm

      - name: Get Sources
        run: python get_source.py --tags "${{ inputs.tag }}"

      - name: Install Dependencies
        run: sudo apt update && sudo apt install -y golang ninja-build autogen autoconf autoconf-archive m4 libtool build-essential qemu-user-static nasm

      - name: Build Host protobuf
        run: |
          if ! test -f "${PROTOBUF}"; then
              patch -up1 <"${{ github.workspace }}/patches/protobuf_CMakeLists.txt.patch"
              BUILD="${{ github.workspace }}/src/protobuf/build"
              rm -rf "${BUILD}" && mkdir -p "${BUILD}"
              cmake -S"${{ github.workspace }}/src/protobuf" -B"${BUILD}" -GNinja -Dprotobuf_BUILD_TESTS=OFF
              ninja -C "${BUILD}" -j"$(nproc --all)"
          fi

      - name: Apply Patches
        run: |
          sed -i '/};/ a\
          #ifndef TEMP_FAILURE_RETRY\
          #define TEMP_FAILURE_RETRY(expression) (({ long int __result; do __result = (long int)(expression); while (__result == -1 && errno == EINTR); __result; }))\
          #endif\
          #ifndef PAGE_SIZE\
          #define PAGE_SIZE 4096\
          #endif' ${PWD}/src/logging/liblog/logger.h
          sed -i '/__END_DECLS/i\
          #ifndef TEMP_FAILURE_RETRY\n\
          #define TEMP_FAILURE_RETRY(expression) (({ long int __result; do __result = (long int)(expression); while (__result == -1 && errno == EINTR); __result; }))\n\
          #endif\n' ${PWD}/src/core/libcutils/include/cutils/klog.h
          sed -i '/extern "C" {/a\
          #ifndef TEMP_FAILURE_RETRY\n#define TEMP_FAILURE_RETRY(expression) (({ long int __result; do __result = (long int)(expression); while (__result == -1 && errno == EINTR); __result; }))\n#endif
          ' ${PWD}/src/core/libcutils/uevent.cpp
          sed -i '/struct msghdr hdr = {/,/};/c\
              struct msghdr hdr = {};\
              hdr.msg_name = &addr;\
              hdr.msg_namelen = sizeof(addr);\
              hdr.msg_iov = &iov;\
              hdr.msg_iovlen = 1;\
              hdr.msg_control = static_cast<void*>(control);\
              hdr.msg_controllen = sizeof(control);
          ' ${PWD}/src/core/libcutils/uevent.cpp
          sed -i '/#include "uio.h"/a #include <atomic>' ${PWD}/src/logging/liblog/logger.h
          sed -i 's/static atomic_int pmsg_fd;/static std::atomic<int> pmsg_fd{0};/' ${PWD}/src/logging/liblog/pmsg_writer.cpp
          sed -i 's|#include <stdatomic.h>|#include <atomic>|' ${PWD}/src/logging/liblog/logd_reader.cpp ${PWD}/src/logging/liblog/logd_writer.cpp ${PWD}/src/logging/liblog/logger.h
          sed -i 's/\batomic_int\b/std::atomic<int>/g' ${PWD}/src/logging/liblog/logger.h
          sed -i 's/^ *atomic_int \([^=;]*\)= *\([^;]*\);/std::atomic<int> \1{\2};/g' ${PWD}/src/logging/liblog/logd_writer.cpp
          sed -i 's/static atomic_int dropped;/static std::atomic<int> dropped{0};/' ${PWD}/src/logging/liblog/logd_writer.cpp
          sed -i 's/\bmemory_order_relaxed\b/std::memory_order_relaxed/g' ${PWD}/src/logging/liblog/logd_writer.cpp

          find ${PWD}/src -type f \( -name "*.c" -o -name "*.cpp" -o -name "*.h" \) -exec sed -i '/#include <sys\/cdefs.h>/c\
          #ifdef __cplusplus\
          #ifndef __GLIBC__\
          #define __BEGIN_DECLS extern "C" {\
          #define __END_DECLS }\
          #endif\
          #else\
          #ifndef __GLIBC__\
          #define __BEGIN_DECLS\
          #define __END_DECLS\
          #endif\
          #endif' {} +

          sed -i 's/__BEGIN_DECLS/#ifdef __cplusplus\nextern "C" {\n#endif/g; s/__END_DECLS/#ifdef __cplusplus\n}\n#endif/g' ${PWD}/src/core/libpackagelistparser/include/packagelistparser/packagelistparser.h

          sed -i '/#include <sys\/limits.h>/d; /#include <log\/log.h>/a\
          #ifndef GID_MAX\n#define GID_MAX 2147483647\n#endif\n\
          #ifndef UID_MAX\n#define UID_MAX 2147483647\n#endif' ${PWD}/src/core/libpackagelistparser/packagelistparser.cpp

          sed -i 's/std::vector<const StringPiece>/std::vector<StringPiece>/g' ${PWD}/src/base/tools/aapt2/util/Files.cpp

          sed -i '/#elif defined(OPENSSL_RISCV64)/a \#elif defined(OPENSSL_LOONG64)\n\#define EXPECTED_NR_getrandom 278' ${PWD}/src/boringssl/src/crypto/fipsmodule/rand/getrandom_fillin.h
          sed -i '/#elif defined(__MIPSEL__) && !defined(__LP64__)/i \#elif defined(__loongarch64)\n\#define OPENSSL_64_BIT\n\#define OPENSSL_LOONG64' ${PWD}/src/boringssl/src/include/openssl/target.h
          sed -i '/#define LOG_TAG "cutils-trace"/a\
          #ifndef PROP_NAME_MAX\
          #define PROP_NAME_MAX 32\
          #endif
          ' ${PWD}/src/core/libcutils/trace-dev.inc

      - name: Build ZLIB
        run: |
          TOOLCHAIN=${{ github.workspace }}/zig-as-llvm
          export CC=${TOOLCHAIN}/bin/cc
          export CXX=${TOOLCHAIN}/bin/c++
          export CFLAGS="-fsanitize=undefined"
          export CXXFLAGS="-fsanitize=undefined"
          export LD=${TOOLCHAIN}/bin/ld
          export OBJCOPY=${TOOLCHAIN}/bin/objcopy
          export AR=${TOOLCHAIN}/bin/ar
          export STRIP=${TOOLCHAIN}/bin/strip
          curl -LkSs https://github.com/madler/zlib/releases/download/v1.3.1/zlib-1.3.1.tar.xz | xz -d | tar -x
          cd zlib-1.3.1
          ./configure --prefix="$(pwd)/../extrabuild" --static
          make -j"$(nproc --all)" install

      - name: Build Packages
        run: |
          chmod +x build.sh
          ./build.sh "${{ github.workspace }}/zig-as-llvm" "$(command -v protoc)" --build "build" --jobs "$(nproc)"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.target_arch }}
          path: build
